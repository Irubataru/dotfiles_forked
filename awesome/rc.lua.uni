-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
--More advanced widgets
require("vicious")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.add_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/home/glesaaen/.config/awesome/themes/redhalo/theme.lua")
--beautiful.init("/usr/share/awesome/themes/default/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "urxvt"
terminal_cmd = terminal .. " -e"
--editor = os.getenv("EDITOR") or "vim"
editor = "vim"
editor_cmd = terminal .. " -e " .. editor
file_browser = "pcmanfm"

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {
	names = { "main", "pdf", "c++" ,"http", "math", "music", "tmp1", "tmp2", "gui" },
	layout = { layouts[4], layouts[10], layouts[4], layouts[1], layouts[4], layouts[4],
		   layouts[4], layouts[4], layouts[1]}
}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag(tags.names, s, tags.layout)
end
-- }}}



-- {{{ Menu
-- Create a laucher widget and a main menu

applications = {
	{"Firefox", "/usr/bin/firefox"},
	{"Mathematica", "/usr/local/bin/mathematica"},
	{"Skype", "/usr/bin/skype"},
	{"Spotify","/home/glesaaen/Installs/bin/spotify"},
}

directories = {
	{"Home", file_browser .. " " .. ""},
	{"Downloads", file_browser .. " " .. "Downloads"},
	{"Frankfurt", file_browser .. " " .. "Dropbox/Frankfurt"},
	{"NTNU", file_browser .. " " .. "Dropbox/NTNU"}
}


myawesomemenu = {
   { "manual", "xterm -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

systemcmd = {
	{"Reboot", "sudo reboot"},
	{"Shutdown", "sudo shutdown -P now"}
}

mymainmenu = awful.menu({ items = { 	{ "Programs", applications},
					{ "Dirs", directories},
					{ "awesome", myawesomemenu, beautiful.awesome_icon },
					{ "open terminal", terminal },
					{ "System", systemcmd}
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Network usage widget
--netwidget = widget( { type = "textbox" } )
--vicious.register(netwidget, vicious.widgets.net, '<span color="#CC9393">${eth0 down_kb}</span> <span color="#7F9F7F">${eth0 up_kb}</span>', 3)
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })

--Keyboard map indicator and changer
kbdcfg = {}
kbdcfg.cmd = {'setxkbmap no -option "ctrl:nocaps"', 'xkbcomp -I$HOME/.xkb "$HOME/.xkb/setjp2" $DISPLAY'}
--kbdcfg.cmd = {'setxkbmap no -option "ctrl:nocaps"', 'setxkbmap us -option "ctrl:nocaps"'}
kbdcfg.layout = {"no","jp"}
--kbdcfg.layoutName = {"no","jp2"}
kbdcfg.current = 1
kbdcfg.widget = widget({type = "textbox", align = "right"})
kbdcfg.widget.text = " " .. kbdcfg.layout[kbdcfg.current] .. " "
kbdcfg.switch = function()
	kbdcfg.current = kbdcfg.current % #(kbdcfg.layout) + 1
	local t = " " .. kbdcfg.layout[kbdcfg.current] .. " "
	kbdcfg.widget.text = t
	os.execute( kbdcfg.cmd[kbdcfg.current] ) -- .. " " .. kbdcfg.layoutName[kbdcfg.current] )
end

--Print screen function
screenshotloc = "/home/glesaaen/Pictures/Screenshots/" 

printscreen = function()
	local date = os.date("%d-%m-%y_%H.%M")
	local testfile = screenshotloc..date..".png"
	prtscr_c = 1
	while (awful.util.file_readable(testfile) and (prtscr_c < 100)) do
		testfile = screenshotloc..date.."_"..prtscr_c..".png"
		prtscr_c = prtscr_c + 1
	end
	os.execute( "import -window root "..testfile )
end
		



-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        mytextclock,
	kbdcfg.widget,
--	netwidget,
        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))

kbdcfg.widget:buttons(awful.util.table.join(
	awful.button({ }, 1, function () kbdcfg.switch() end)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Keyboard layout change
	awful.key({ "Mod1" },"Shift_L", function () kbdcfg.switch() end),
	
    -- Print screen
    	awful.key({ modkey, "Control" }, "p", function () printscreen() end),

    -- Lock screen
    	awful.key({"Mod1", "Control"},"l", function () awful.util.spawn("xscreensaver-command -l") end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end), --Redefined in clientkeys to move a window to the next tag
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey }, "s", awful.client.movetoscreen),
    --awful.key({ modkey,		  }, "s",     function () awful.client.movetoscreen     end),
    --awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    --awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
		awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
		awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
		awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
		awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
		awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
		awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
		awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
		awful.key({ modkey,           }, "n",
				function (c)
						-- The client currently has the input focus, so it cannot be
						-- minimized, since minimized clients can't have the focus.
						c.minimized = true
						end),
		awful.key({ modkey,           }, "m",
				function (c)
						c.maximized_horizontal = not c.maximized_horizontal
						c.maximized_vertical   = not c.maximized_vertical
						end),
		awful.key({ modkey, "Control"   }, "k",
				function (c)
						local curidx = awful.tag.getidx(c:tags()[1])
						if curidx == 1 then
								c:tags({screen[mouse.screen]:tags()[9]})
						else
								c:tags({screen[mouse.screen]:tags()[curidx - 1]})
						end
						end),
		awful.key({ modkey, "Control"   }, "j",
				function (c)
						local curidx = awful.tag.getidx(c:tags()[1])
						if curidx == 9 then
								c:tags({screen[mouse.screen]:tags()[1]})
						else
								c:tags({screen[mouse.screen]:tags()[curidx + 1]})
						end
						end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     size_hints_honor = false,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    { rule = { class = "Chromium-browser" },
      properties = { tag = tags[1][4] } }
    --{ rule = { class = "Zathura" },
      --properties = { tag = tags[1][2] } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}


-- {{{ Startup programs
-- Short script for boot-up programs
--function run_once(cmd,with_shell)
	--findme = cmd
	--firstspace = cmd:find(" ")
	--if firstspace then
		--findme = cmd:sub(0, firstspace-1)
	--end
	--if with_shell then
		--awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
	--else
		--awful.util.spawn("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
	--end
--end

--function run_once(prg,cmd)
	--if not prg then
		--do return nil end
	--end

	----findme = prg

	----firstspace = prg:find(" ")
	----if firstspace then
		----findme = prg:sub(0, firstspace-1)
	----end
	----local processHandle = io.popen("pgrep -f -u $USER " .. prg)
	----local processID = processHandle:read("*a")
	----processHandle:close()

	----if not processID then
		----os.execute(cmd)
		----awful.util.spawn_with_shell(cmd)
	----end

	--awful.util.spawn_with_shell("pgrep -f -u $USER " .. prg .. " || (" .. cmd .. ")")
--end

function run_once(prg,arg_string,pname,screen)
	if not prg then
		do return nil end
	end

	if not pname then
		pname = prg
	end

	if not arg_string then 
		awful.util.spawn_with_shell("pgrep -f -u $USER -x '" .. pname .. "' || (" .. prg .. ")",screen)
	else
		awful.util.spawn_with_shell("pgrep -f -u $USER -x '" .. pname .. " ".. arg_string .."' || (" .. prg .. " " .. arg_string .. ")",screen)
	end
end

run_once("dropboxd");
run_once("setxkbmap no",'-option "ctrl:nocaps"');
run_once("unclutter","-grab -noevents");
run_once("xscreensaver","-nosplash");
run_once("numlockx","on");
run_once("gnome-keyring-daemon","--start --components=pkcs11");
run_once("xrdb","~/.Xresources");
run_once("xrandr","--output HDMI1 --left-of VGA1");


--autorunapps = {
	--"dropboxd",
	--'setxkbmap no -option "ctrl:nocaps"',
	--"unclutter -grab"
--}

--for app = 1, #autorunapps do
	--run_once(autorunapps[app][1],autorunapps[app][2])
	--awful.util.spawn(autorunapps[app])
--end

-- }}}
